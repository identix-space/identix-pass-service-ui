schema {
  query: Query
  mutation: Mutation
}

type Account {
  avatarUrl: String
  connections: [OAuthConnection!]
  createdAt: DateTime!
  did: String!
  id: Int!
  roles: [AccountRole!]
  sessions: [AccountSession!]
  status: AccountStatus!
  updatedAt: DateTime!
}

enum AccountRole {
  ADMIN
  USER
}

type AccountSession {
  account: Account!
  accountId: Int!
  createdAt: DateTime!
  expiresAt: DateTime!
  id: Int!
  ipAddr: String!
  updatedAt: DateTime!
  userAgent: String
}

enum AccountStatus {
  ACTIVE
  DELETED
  INACTIVE
}

enum AgentsRoles {
  holder
  issuer
  verifier
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EventLogEntry {
  eventDate: DateTime!
  eventType: String!
  id: Int!
  message: String!
  ownerDid: String!
  vcDid: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  deleteAccount: Boolean!
  issueVC(holderDid: String!, vcParams: String!, vcTypeDid: String!): Boolean!
  requestVcVerification(vcDid: String!, verifierDid: String!): Boolean!
  verifyVC(verificationData: String!): Boolean!
}

type OAuthConnection {
  account: Account!
  accountId: Int!
  createdAt: DateTime!
  id: Int!
  otherData: JSON!
  uid: String!
  updatedAt: DateTime!
}

type Query {
  checkAccountExists(did: String!): Boolean!
  getAllAccounts: [String!]!
  getEventLogEntries(count: Int, startIndex: Int): [EventLogEntry!]!
  getUserVCs(limit: Int, page: Int, role: AgentsRoles, vcType: String): [VC!]!
  getVC(vcDid: String!): VC!
  getVcTypes: [VcTypeInfo!]!
  logout: Boolean!
  whoami: Account!
}

type VC {
  createdAt: String!
  holderDid: String!
  issuerDid: String!
  updatedAt: String!
  vcDid: String!
  vcParams: String!
  vcRawText: String!
  vcTypeDid: String!
  verificationCases: [VerificationCase!]!
}

type VcTypeInfo {
  vcTypeDid: String!
  vcTypeTag: String!
}

type VerificationCase {
  verificationStatus: VerificationStatuses!
  verifierDid: String!
}

enum VerificationStatuses {
  ACCEPTED
  PENDING_VERIFY
  REJECTED
}